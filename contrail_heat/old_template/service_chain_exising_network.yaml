heat_template_version: 2013-05-23

description: >
  HOT template to Create a service instance
  Creates a network policy for applying service between two VNs created before.
  Attach the network policy to two virtual networks

parameters:
  policy_name:
    type: string
    description: Policy Name
  direction:
    type: string
    description: Direction of Policy
  start_src_ports:
    type: number
    description: Start of src port
  end_src_ports:
    type: number
    description: End of src port
  start_dst_ports:
    type: number
    description: Start of dst port
  end_dst_ports:
    type: number
    description: End of dst port
  private_net_1_name:
    type: string
    description: Name of private network to be created
  private_net_2_name:
    type: string
    description: Name of private network to be created
  private_template:
    type: string
    default: TestTemplate1
    description: service template name or ID
  private_instance_name:
    type: string
    default: TestInstance1
    description: service instance name
  private_availability_zone:
    type: string
    default: ""
    description: availability zone in form of Zone:Host

resources:
  service_instance:
    type: OS::Contrail::ServiceInstance
    properties:
      name: { get_param: private_instance_name }
      service_template: { get_param:  private_template}
      availability_zone: { get_param: private_availability_zone}
      scale_out: 
          max_instances: 1
      interface_list: [
          {
              virtual_network: "auto"
          },
          {
              virtual_network: {get_param: private_net_1_name}
          },
          {
              virtual_network: {get_param: private_net_2_name}
          },
      ]

  private_policy:
    type: OS::Contrail::NetworkPolicy
    depends_on: [ service_instance ]
    properties:
      name: { get_param: policy_name }
      entries:
        policy_rule: [
              { 
                "direction": { get_param: direction }, 
                "protocol": "any", 
                "src_ports": [{"start_port": {get_param: start_src_ports}, "end_port": {get_param: end_src_ports}}],
                "dst_ports": [{"start_port": {get_param: start_dst_ports}, "end_port": {get_param: end_dst_ports}}],
                "dst_addresses": [{ "virtual_network": {get_param: private_net_1_name}}], 
                "action_list": {"apply_service": [{get_resource: service_instance}]}, 
                "src_addresses": [{ "virtual_network": {get_param: private_net_2_name}}] 
              }, 
        ]

  private_policy_attach_net1:
    type: OS::Contrail::AttachPolicy
    depends_on: [ private_policy ]
    properties:
      network: { get_param: private_net_1_name }
      policy: { get_attr: [private_policy, fq_name] }

  private_policy_attach_net2:
    type: OS::Contrail::AttachPolicy
    depends_on: [ private_policy ]
    properties:
      network: { get_param: private_net_2_name }
      policy: { get_attr: [private_policy, fq_name] }

outputs:
  service_instance_fq_name:
    description: FQ name of the service template
    value: { get_attr: [ service_instance, fq_name] }
  service_instance_vms:
    description: List of service VMs
    value: { get_attr: [ service_instance, virtual_machines] }
  num_active_service_instance_vms:
    description: Number of active service VMs
    value: { get_attr: [ service_instance, active_service_vms] }
