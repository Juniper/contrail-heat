heat_template_version: 2015-04-30

description: >
  HOT template to create a new network, and for deploying
  two servers into the new network. It also has security-groups
  to control traffic flow

parameters:
  image:
    type: string
    description: Name of image to use for servers
  flavor:
    type: string
    description: Flavor to use for servers
  private_net_name:
    type: string
    description: Name of private network to be created
  port_name_1:
    type: string
    description: Name of port
  port_name_2:
    type: string
    description: Name of port
  private_network_prefix:
    type: string
    description: Private network prefix
  private_network_prefix_len:
    type: string
    description: Private network prefix len
  addr_from_start_true:
    type: boolean
    description: Address allocation from start

resources:
  template_NetworkIpam:
    type: OS::Contrail::NetworkIpam
    properties:
      name: { get_param: private_net_name }

  template_VirtualNetwork:
    type: OS::Contrail::VirtualNetwork
    depends_on: [ template_NetworkIpam ]
    properties:
      name: { get_param: private_net_name }
      network_ipam_refs: { get_resource: template_NetworkIpam }
      network_ipam_refs_data:
        {
          network_ipam_refs_data_ipam_subnets:
            [{
              network_ipam_refs_data_ipam_subnets_subnet:
                {
                  network_ipam_refs_data_ipam_subnets_subnet_ip_prefix: { get_param: private_network_prefix },
                  network_ipam_refs_data_ipam_subnets_subnet_ip_prefix_len: { get_param: private_network_prefix_len },
                },
              network_ipam_refs_data_ipam_subnets_addr_from_start: { get_param: addr_from_start_true },
            }]
         }

  template_InstanceIp_1:
    type: OS::Contrail::InstanceIp
    properties:
      name: { get_param: port_name_1 }
      virtual_machine_interface_refs: { get_resource: template_VirtualMachineInterface_1 }
      virtual_network_refs: { list_join: [':', { get_attr: [ template_VirtualNetwork, fq_name ] } ] }

  template_VirtualMachineInterface_1:
    type: OS::Contrail::VirtualMachineInterface
    properties:
      name: { get_param: port_name_1 }
      virtual_network_refs: { list_join: [':', { get_attr: [ template_VirtualNetwork, fq_name ] } ] }
      security_group_refs: { list_join: [':', { get_attr: [ test_security_group, fq_name ] } ] }

  template_InstanceIp_2:
    type: OS::Contrail::InstanceIp
    properties:
      name: { get_param: port_name_2 }
      virtual_machine_interface_refs: { get_resource: template_VirtualMachineInterface_2 }
      virtual_network_refs: { list_join: [':', { get_attr: [ template_VirtualNetwork, fq_name ] } ] }

  template_VirtualMachineInterface_2:
    type: OS::Contrail::VirtualMachineInterface
    properties:
      name: { get_param: port_name_2 }
      virtual_network_refs: { list_join: [':', { get_attr: [ template_VirtualNetwork, fq_name ] } ] }
      security_group_refs: { list_join: [':', { get_attr: [ test_security_group, fq_name ] } ] }

  server1:
    type: OS::Nova::Server
    depends_on: [ template_InstanceIp_1 ]
    properties:
      name: Server1
      image: { get_param: image }
      flavor: { get_param: flavor }
      networks:
        - port: { get_resource: template_VirtualMachineInterface_1 }

  server2:
    type: OS::Nova::Server
    depends_on: [ template_InstanceIp_2 ]
    properties:
      name: Server2
      image: { get_param: image }
      flavor: { get_param: flavor }
      networks:
        - port: { get_resource: template_VirtualMachineInterface_2 }

  test_security_group:
    type: OS::Contrail::SecurityGroup
    properties:
      name: test_security_group
      security_group_entries:
        {
          security_group_entries_policy_rule:
            [{
               security_group_entries_policy_rule_protocol: tcp,
               security_group_entries_policy_rule_direction: '<>',
               security_group_entries_policy_rule_ethertype: 'IPv4',
               security_group_entries_policy_rule_dst_addresses:
                 [{
                   security_group_entries_policy_rule_dst_addresses_subnet:
                     {
                       security_group_entries_policy_rule_dst_addresses_subnet_ip_prefix: 0.0.0.0,
                       security_group_entries_policy_rule_dst_addresses_subnet_ip_prefix_len: 0,
                     },
                 }],
               security_group_entries_policy_rule_dst_ports:
                 [{
                   security_group_entries_policy_rule_dst_ports_start_port: -1,
                   security_group_entries_policy_rule_dst_ports_end_port: -1,
                 }],
               security_group_entries_policy_rule_src_addresses:
                 [{
                   security_group_entries_policy_rule_src_addresses_security_group: 'local',
                 }],
               security_group_entries_policy_rule_src_ports:
                 [{
                   security_group_entries_policy_rule_src_ports_start_port: 22,
                   security_group_entries_policy_rule_src_ports_end_port: 22,
                 }],
             },
             {
               security_group_entries_policy_rule_protocol: udp,
               security_group_entries_policy_rule_direction: '<>',
               security_group_entries_policy_rule_ethertype: 'IPv4',
               security_group_entries_policy_rule_dst_addresses:
                 [{
                   security_group_entries_policy_rule_dst_addresses_subnet:
                     {
                       security_group_entries_policy_rule_dst_addresses_subnet_ip_prefix: 0.0.0.0,
                       security_group_entries_policy_rule_dst_addresses_subnet_ip_prefix_len: 0,
                     },
                 }],
               security_group_entries_policy_rule_dst_ports:
                 [{
                   security_group_entries_policy_rule_dst_ports_start_port: -1,
                   security_group_entries_policy_rule_dst_ports_end_port: -1,
                 }],
               security_group_entries_policy_rule_src_addresses:
                 [{
                   security_group_entries_policy_rule_src_addresses_security_group: 'local',
                 }],
               security_group_entries_policy_rule_src_ports:
                 [{
                   security_group_entries_policy_rule_src_ports_start_port: -1,
                   security_group_entries_policy_rule_src_ports_end_port: -1,
                 }],
              }
            ]}

outputs:
  server1_private_ip:
    description: IP address of server1 in private network
    value: { get_attr: [ server1, first_address ] }
  server2_private_ip:
    description: IP address of server2 in private network
    value: { get_attr: [ server2, first_address ] }
