# Template to create a stack to enable port mirroring on a specific port,  and where analyzer is also attached to contrail service instance version 2 

  #           Mirrored to-->Analyzer-->analyzer port(left_vn)-> Attached to port_tuple->SIv2 (left_intf = left_vn)
  #           |
  #        left_vm(left_vn) ---- right_vm(left_vn)


heat_template_version: 2015-04-30

parameters:
  analyzer_name:
    type: string
    description: 
  routing_instance:
    type: string
    description: Pass or Deny
  mirror_direction:
    type: string
    description: Protocol
  udp_port:
    type: number
    description: End of the Source Port Range


 # VN Parameters 
  left_vn:
    type: string
    description: Name of left network to be created
  network_ipam_refs_data_ipam_subnets_subnet_ip_prefix_1:
    type: string
    description: subnet prefix for mgmt network
  network_ipam_refs_data_ipam_subnets_subnet_ip_prefix_len_1:
    type: string
    description: subnet prefix len for mgmt network
  network_ipam_refs_data_ipam_subnets_addr_from_start_true:
    type: boolean
    description: Address allocation from start of the pool
  domain:
    type: string
    description: Name of the Domain

  # Contrail svc template v2 parameters 
  service_template_name:
    type: string
    label: Service template fq name
    description: Service template for port tuple
  service_template_properties_version:
    type: string
    description: Indicates service version
  service_template_properties_service_mode:
    type: string
    description: service mode
  service_template_properties_service_type:
    type: string
    description: service type
  service_template_properties_image_name:
    type: string
    description: Name of the image
  service_template_properties_flavor:
    type: string
    description: Flavor
  service_template_properties_interface_type_service_interface_type_1:
    type: string
    description: service_interface_type for the ServiceTemplate
  service_template_properties_service_scaling:
    type: string
    description: Indicates whether service scaling is enabled
  service_template_properties_availability_zone_enable:
    type: string
    description: Indicates availability zone is enabled
  service_template_properties_ordered_interfaces:
    type: string
    description: Indicates service interfaces are ordered
  service_template_properties_service_virtualization_type:
    type: string
    description: Indicates virtualization type

  # Contrail service instance version 2 parameters 
  service_instance_name:
    type: string
    label: Service instance name
    description: Service instance for port tuple
  service_instance_fq_name:
    type: string
    label: Service instance fq name
    description: Service instance FQDN for port tuple

  # Analyzer name  
  svm_name: 
    type: string
    description: Name of the SVM

  # Nova image parameters 
  left_vm_name:
    type: string
    description: Name of the left VM
  right_vm_name: 
    type: string
    description: Name of the right VM
  image:
    type: string
    description: Name of the image
  flavor:
    type: string
    description: Flavor
 
resources:
  template_NetworkIpam_1:
    type: OS::Contrail::NetworkIpam
    properties:
      name: { get_param: left_vn }

  template_VirtualNetwork_1:
    type: OS::Contrail::VirtualNetwork
    depends_on: [ template_NetworkIpam_1 ]
    properties:
      name: { get_param: left_vn }
      network_ipam_refs: { get_resource: template_NetworkIpam_1 }
      network_ipam_refs_data:
        {
          network_ipam_refs_data_ipam_subnets:
            [{
              network_ipam_refs_data_ipam_subnets_subnet:
                {
                  network_ipam_refs_data_ipam_subnets_subnet_ip_prefix: { get_param: network_ipam_refs_data_ipam_subnets_subnet_ip_prefix_1 },
                  network_ipam_refs_data_ipam_subnets_subnet_ip_prefix_len: { get_param: network_ipam_refs_data_ipam_subnets_subnet_ip_prefix_len_1 },
                },
            }]
         }

  # Contrail svc template v2
  template_ServiceTemplate:
    type: OS::Contrail::ServiceTemplate
    properties:
      name: { get_param: service_template_name }
      service_template_properties:
        {
          service_template_properties_version: { get_param: service_template_properties_version },
          service_template_properties_service_mode: { get_param: service_template_properties_service_mode },
          service_template_properties_service_type: { get_param: service_template_properties_service_type },
          service_template_properties_image_name: { get_param: service_template_properties_image_name },
          service_template_properties_service_scaling: { get_param: service_template_properties_service_scaling },
          service_template_properties_interface_type:
            [
              {
              service_template_properties_interface_type_service_interface_type: { get_param: service_template_properties_interface_type_service_interface_type_1 },
              },
            ],
          service_template_properties_flavor: { get_param: service_template_properties_flavor },
          service_template_properties_ordered_interfaces: { get_param: service_template_properties_ordered_interfaces },
          service_template_properties_service_virtualization_type: { get_param: service_template_properties_service_virtualization_type },
          service_template_properties_availability_zone_enable: { get_param: service_template_properties_availability_zone_enable },
        }
      domain: { get_param: domain }

  # Contrail service instance version 2
  template_ServiceInstance:
    type: OS::Contrail::ServiceInstance
    depends_on: [ template_ServiceTemplate ]
    properties:
      name: { get_param: service_instance_name }
      service_instance_properties:
        {
          service_instance_properties_interface_list:
            [
              {
                service_instance_properties_interface_list_virtual_network:
                 {
                   list_join: [':', { get_attr: [ template_VirtualNetwork_1, fq_name ] } ]
                 },
              },
            ],
        }
      service_template_refs: { get_resource: template_ServiceTemplate }

  template_PortTuple:
    type: OS::Contrail::PortTuple
    depends_on: [ template_ServiceInstance ]
    properties:
      name: { get_attr: [ random_key_1, value ] }
      service_instance: { list_join: [':', { get_attr: [ template_ServiceInstance, fq_name ] } ] }

  template_VirtualMachineInterface_1:
    type: OS::Contrail::VirtualMachineInterface
    depends_on: [ template_PortTuple, template_InstanceIp_2 ]
    properties:
      name: { get_param: left_vm_name}
      virtual_network_refs: { list_join: [':', { get_attr: [ template_VirtualNetwork_1, fq_name ] } ] }
      virtual_machine_interface_properties:
        {
            virtual_machine_interface_properties_interface_mirror: 
                                                                  {
                                            
                virtual_machine_interface_properties_interface_mirror_traffic_direction: {get_param: mirror_direction},
                virtual_machine_interface_properties_interface_mirror_mirror_to: 
                                                                                {
                    virtual_machine_interface_properties_interface_mirror_mirror_to_analyzer_name: {get_param: analyzer_name},
                    virtual_machine_interface_properties_interface_mirror_mirror_to_analyzer_ip_address: { get_attr: [template_InstanceIp_2, instance_ip_address]
                                                                                 }, 
                    virtual_machine_interface_properties_interface_mirror_mirror_to_routing_instance: {get_param : routing_instance},
                    virtual_machine_interface_properties_interface_mirror_mirror_to_udp_port: { get_param: udp_port},
                                                                                 }
                                                                  }

        }

  # Analyzer VMI
  template_VirtualMachineInterface_2:
    type: OS::Contrail::VirtualMachineInterface
    depends_on: [ template_PortTuple,  ]
    properties:
      name: { get_attr: [ random_key_2, value ] }
      virtual_machine_interface_properties:
        {
          virtual_machine_interface_properties_service_interface_type: { get_param: service_template_properties_interface_type_service_interface_type_1 },
            
        }
      port_tuple_refs: { get_resource: template_PortTuple }
      virtual_network_refs: { list_join: [':', { get_attr: [ template_VirtualNetwork_1, fq_name ] } ] }

  template_VirtualMachineInterface_3:
    type: OS::Contrail::VirtualMachineInterface
    depends_on: [ template_PortTuple ]
    properties:
      name: { get_param: right_vm_name}
      virtual_network_refs: { list_join: [':', { get_attr: [ template_VirtualNetwork_1, fq_name ] } ] }


  template_InstanceIp_1:
    type: OS::Contrail::InstanceIp
    depends_on: [ template_InstanceIp_2, template_VirtualMachineInterface_1, template_VirtualNetwork_1 ]
    properties:
      name: { get_attr: [ random_key_1, value ] }
      virtual_machine_interface_refs: { get_resource: template_VirtualMachineInterface_1 }
      virtual_network_refs: { list_join: [':', { get_attr: [ template_VirtualNetwork_1, fq_name ] } ] }

  # Analyzer ip
  template_InstanceIp_2:
    type: OS::Contrail::InstanceIp
    depends_on: [ template_VirtualMachineInterface_2, template_VirtualNetwork_1 ]
    properties:
      name: { get_attr: [ random_key_2, value ] }
      virtual_machine_interface_refs: { get_resource: template_VirtualMachineInterface_2 }
      virtual_network_refs: { list_join: [':', { get_attr: [ template_VirtualNetwork_1, fq_name ] } ] }

  template_InstanceIp_3:
    type: OS::Contrail::InstanceIp
    depends_on: [ template_VirtualMachineInterface_3, template_VirtualNetwork_1 ]
    properties:
      name: { get_attr: [ random_key_3, value ] }
      virtual_machine_interface_refs: { get_resource: template_VirtualMachineInterface_3 }
      virtual_network_refs: { list_join: [':', { get_attr: [ template_VirtualNetwork_1, fq_name ] } ] }

  # Analyzer instance 
  instance:
    type: OS::Nova::Server
    depends_on: [ template_InstanceIp_1, template_InstanceIp_2, template_InstanceIp_3 ]
    properties:
      name: {get_param: svm_name }
      image: { get_param:  service_template_properties_image_name }
      flavor: { get_param: service_template_properties_flavor }
      networks:
        - port: { get_resource: template_VirtualMachineInterface_2 }
  
  template_leftVM:
    type: OS::Nova::Server
    depends_on: [ template_InstanceIp_1, instance ]
    properties:
      name: {get_param: left_vm_name }
      image: { get_param:  image }
      flavor: { get_param: flavor }
      networks:
        - port: { get_resource: template_VirtualMachineInterface_1 }

  template_rightVM:
    type: OS::Nova::Server
    depends_on: [ template_InstanceIp_3 ]
    properties:
      name: {get_param: right_vm_name }
      image: { get_param:  image }
      flavor: { get_param: flavor }
      networks:
        - port: { get_resource: template_VirtualMachineInterface_3 }

  # Network policy for enabling mirroring

                              
  random_key_1:
     type: OS::Heat::RandomString
     properties:
       length: 16

  random_key_2:
     type: OS::Heat::RandomString
     properties:
       length: 16

  random_key_3:
     type: OS::Heat::RandomString
     properties:
       length: 16


